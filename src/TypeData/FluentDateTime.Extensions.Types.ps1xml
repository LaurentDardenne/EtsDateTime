<?xml version="1.0" encoding="utf-8"?>
<Types>
  <Type>
    <Name>System.Int32</Name>
    <Members>
      <ScriptMethod>
        <Name>Years</Name>
        <Script> switch ($args.Count) {
				 # Years([int] $years)
		 0 { [FluentDate.NumberExtensions]::Years($this) }

		 default { throw "No overload for 'Years' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Quarters</Name>
        <Script> switch ($args.Count) {
				 # Quarters([int] $quarters)
		 0 { [FluentDate.NumberExtensions]::Quarters($this) }

		 default { throw "No overload for 'Quarters' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Months</Name>
        <Script> switch ($args.Count) {
				 # Months([int] $months)
		 0 { [FluentDate.NumberExtensions]::Months($this) }

		 default { throw "No overload for 'Months' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Weeks</Name>
        <Script> switch ($args.Count) {
				 # Weeks([int] $weeks)
		 0 { [FluentDate.NumberExtensions]::Weeks($this) }

		 default { throw "No overload for 'Weeks' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Days</Name>
        <Script> switch ($args.Count) {
				 # Days([int] $days)
		 0 { [FluentDate.NumberExtensions]::Days($this) }

		 default { throw "No overload for 'Days' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Hours</Name>
        <Script> switch ($args.Count) {
				 # Hours([int] $hours)
		 0 { [FluentDate.NumberExtensions]::Hours($this) }

		 default { throw "No overload for 'Hours' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Minutes</Name>
        <Script> switch ($args.Count) {
				 # Minutes([int] $minutes)
		 0 { [FluentDate.NumberExtensions]::Minutes($this) }

		 default { throw "No overload for 'Minutes' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Seconds</Name>
        <Script> switch ($args.Count) {
				 # Seconds([int] $seconds)
		 0 { [FluentDate.NumberExtensions]::Seconds($this) }

		 default { throw "No overload for 'Seconds' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Milliseconds</Name>
        <Script> switch ($args.Count) {
				 # Milliseconds([int] $milliseconds)
		 0 { [FluentDate.NumberExtensions]::Milliseconds($this) }

		 default { throw "No overload for 'Milliseconds' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Ticks</Name>
        <Script> switch ($args.Count) {
				 # Ticks([int] $ticks)
		 0 { [FluentDate.NumberExtensions]::Ticks($this) }

		 default { throw "No overload for 'Ticks' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>System.DateTimeOffset</Name>
    <Members>
      <ScriptMethod>
        <Name>AddFluentTimeSpan</Name>
        <Script> switch ($args.Count) {
				 # AddFluentTimeSpan([System.DateTimeOffset] $dateTimeOffset, [FluentDate.FluentTimeSpan] $timeSpan)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::AddFluentTimeSpan($this,$args[0]) }

		 default { throw "No overload for 'AddFluentTimeSpan' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SubtractFluentTimeSpan</Name>
        <Script> switch ($args.Count) {
				 # SubtractFluentTimeSpan([System.DateTimeOffset] $dateTimeOffset, [FluentDate.FluentTimeSpan] $timeSpan)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SubtractFluentTimeSpan($this,$args[0]) }

		 default { throw "No overload for 'SubtractFluentTimeSpan' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>EndOfDay</Name>
        <Script> switch ($args.Count) {
				 # EndOfDay([System.DateTimeOffset] $date)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::EndOfDay($this) }

		 default { throw "No overload for 'EndOfDay' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>BeginningOfDay</Name>
        <Script> switch ($args.Count) {
				 # BeginningOfDay([System.DateTimeOffset] $date)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::BeginningOfDay($this) }

		 default { throw "No overload for 'BeginningOfDay' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>NextYear</Name>
        <Script> switch ($args.Count) {
				 # NextYear([System.DateTimeOffset] $start)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::NextYear($this) }

		 default { throw "No overload for 'NextYear' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>PreviousYear</Name>
        <Script> switch ($args.Count) {
				 # PreviousYear([System.DateTimeOffset] $start)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::PreviousYear($this) }

		 default { throw "No overload for 'PreviousYear' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>NextDay</Name>
        <Script> switch ($args.Count) {
				 # NextDay([System.DateTimeOffset] $start)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::NextDay($this) }

		 default { throw "No overload for 'NextDay' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>PreviousDay</Name>
        <Script> switch ($args.Count) {
				 # PreviousDay([System.DateTimeOffset] $start)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::PreviousDay($this) }

		 default { throw "No overload for 'PreviousDay' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Next</Name>
        <Script> switch ($args.Count) {
				 # Next([System.DateTimeOffset] $start, [System.DayOfWeek] $day)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::Next($this,$args[0]) }

		 default { throw "No overload for 'Next' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Previous</Name>
        <Script> switch ($args.Count) {
				 # Previous([System.DateTimeOffset] $start, [System.DayOfWeek] $day)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::Previous($this,$args[0]) }

		 default { throw "No overload for 'Previous' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>WeekAfter</Name>
        <Script> switch ($args.Count) {
				 # WeekAfter([System.DateTimeOffset] $start)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::WeekAfter($this) }

		 default { throw "No overload for 'WeekAfter' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>WeekEarlier</Name>
        <Script> switch ($args.Count) {
				 # WeekEarlier([System.DateTimeOffset] $start)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::WeekEarlier($this) }

		 default { throw "No overload for 'WeekEarlier' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>IncreaseTime</Name>
        <Script> switch ($args.Count) {
				 # IncreaseTime([System.DateTimeOffset] $startDate, [timespan] $toAdd)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::IncreaseTime($this,$args[0]) }

		 default { throw "No overload for 'IncreaseTime' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>DecreaseTime</Name>
        <Script> switch ($args.Count) {
				 # DecreaseTime([System.DateTimeOffset] $startDate, [timespan] $toSubtract)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::DecreaseTime($this,$args[0]) }

		 default { throw "No overload for 'DecreaseTime' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetTime</Name>
        <Script> switch ($args.Count) {
				 # SetTime([System.DateTimeOffset] $originalDate, [int] $hour)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SetTime($this,$args[0]) }

				 # SetTime([System.DateTimeOffset] $originalDate, [int] $hour, [int] $minute)
		 2 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SetTime($this,$args[0],$args[1]) }

				 # SetTime([System.DateTimeOffset] $originalDate, [int] $hour, [int] $minute, [int] $second)
		 3 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SetTime($this,$args[0],$args[1],$args[2]) }

				 # SetTime([System.DateTimeOffset] $originalDate, [int] $hour, [int] $minute, [int] $second, [int] $millisecond)
		 4 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SetTime($this,$args[0],$args[1],$args[2],$args[3]) }

		 default { throw "No overload for 'SetTime' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetHour</Name>
        <Script> switch ($args.Count) {
				 # SetHour([System.DateTimeOffset] $originalDate, [int] $hour)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SetHour($this,$args[0]) }

		 default { throw "No overload for 'SetHour' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetMinute</Name>
        <Script> switch ($args.Count) {
				 # SetMinute([System.DateTimeOffset] $originalDate, [int] $minute)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SetMinute($this,$args[0]) }

		 default { throw "No overload for 'SetMinute' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetSecond</Name>
        <Script> switch ($args.Count) {
				 # SetSecond([System.DateTimeOffset] $originalDate, [int] $second)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SetSecond($this,$args[0]) }

		 default { throw "No overload for 'SetSecond' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetMillisecond</Name>
        <Script> switch ($args.Count) {
				 # SetMillisecond([System.DateTimeOffset] $originalDate, [int] $millisecond)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SetMillisecond($this,$args[0]) }

		 default { throw "No overload for 'SetMillisecond' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Midnight</Name>
        <Script> switch ($args.Count) {
				 # Midnight([System.DateTimeOffset] $value)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::Midnight($this) }

		 default { throw "No overload for 'Midnight' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Noon</Name>
        <Script> switch ($args.Count) {
				 # Noon([System.DateTimeOffset] $value)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::Noon($this) }

		 default { throw "No overload for 'Noon' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetDate</Name>
        <Script> switch ($args.Count) {
				 # SetDate([System.DateTimeOffset] $value, [int] $year)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SetDate($this,$args[0]) }

				 # SetDate([System.DateTimeOffset] $value, [int] $year, [int] $month)
		 2 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SetDate($this,$args[0],$args[1]) }

				 # SetDate([System.DateTimeOffset] $value, [int] $year, [int] $month, [int] $day)
		 3 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SetDate($this,$args[0],$args[1],$args[2]) }

		 default { throw "No overload for 'SetDate' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetYear</Name>
        <Script> switch ($args.Count) {
				 # SetYear([System.DateTimeOffset] $value, [int] $year)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SetYear($this,$args[0]) }

		 default { throw "No overload for 'SetYear' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetMonth</Name>
        <Script> switch ($args.Count) {
				 # SetMonth([System.DateTimeOffset] $value, [int] $month)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SetMonth($this,$args[0]) }

		 default { throw "No overload for 'SetMonth' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetDay</Name>
        <Script> switch ($args.Count) {
				 # SetDay([System.DateTimeOffset] $value, [int] $day)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SetDay($this,$args[0]) }

		 default { throw "No overload for 'SetDay' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>IsBefore</Name>
        <Script> switch ($args.Count) {
				 # IsBefore([System.DateTimeOffset] $current, [System.DateTimeOffset] $toCompareWith)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::IsBefore($this,$args[0]) }

		 default { throw "No overload for 'IsBefore' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>IsAfter</Name>
        <Script> switch ($args.Count) {
				 # IsAfter([System.DateTimeOffset] $current, [System.DateTimeOffset] $toCompareWith)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::IsAfter($this,$args[0]) }

		 default { throw "No overload for 'IsAfter' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>At</Name>
        <Script> switch ($args.Count) {
				 # At([System.DateTimeOffset] $current, [int] $hour, [int] $minute)
		 2 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::At($this,$args[0],$args[1]) }

				 # At([System.DateTimeOffset] $current, [int] $hour, [int] $minute, [int] $second)
		 3 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::At($this,$args[0],$args[1],$args[2]) }

				 # At([System.DateTimeOffset] $current, [int] $hour, [int] $minute, [int] $second, [int] $milliseconds)
		 4 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::At($this,$args[0],$args[1],$args[2],$args[3]) }

		 default { throw "No overload for 'At' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>FirstDayOfQuarter</Name>
        <Script> switch ($args.Count) {
				 # FirstDayOfQuarter([System.DateTimeOffset] $current)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::FirstDayOfQuarter($this) }

		 default { throw "No overload for 'FirstDayOfQuarter' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>FirstDayOfMonth</Name>
        <Script> switch ($args.Count) {
				 # FirstDayOfMonth([System.DateTimeOffset] $current)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::FirstDayOfMonth($this) }

		 default { throw "No overload for 'FirstDayOfMonth' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>LastDayOfQuarter</Name>
        <Script> switch ($args.Count) {
				 # LastDayOfQuarter([System.DateTimeOffset] $current)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::LastDayOfQuarter($this) }

		 default { throw "No overload for 'LastDayOfQuarter' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>LastDayOfMonth</Name>
        <Script> switch ($args.Count) {
				 # LastDayOfMonth([System.DateTimeOffset] $current)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::LastDayOfMonth($this) }

		 default { throw "No overload for 'LastDayOfMonth' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddBusinessDays</Name>
        <Script> switch ($args.Count) {
				 # AddBusinessDays([System.DateTimeOffset] $current, [int] $days)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::AddBusinessDays($this,$args[0]) }

		 default { throw "No overload for 'AddBusinessDays' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SubtractBusinessDays</Name>
        <Script> switch ($args.Count) {
				 # SubtractBusinessDays([System.DateTimeOffset] $current, [int] $days)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SubtractBusinessDays($this,$args[0]) }

		 default { throw "No overload for 'SubtractBusinessDays' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>IsInFuture</Name>
        <Script> switch ($args.Count) {
				 # IsInFuture([System.DateTimeOffset] $dateTime)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::IsInFuture($this) }

		 default { throw "No overload for 'IsInFuture' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>IsInPast</Name>
        <Script> switch ($args.Count) {
				 # IsInPast([System.DateTimeOffset] $dateTime)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::IsInPast($this) }

		 default { throw "No overload for 'IsInPast' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Round</Name>
        <Script> switch ($args.Count) {
				 # Round([System.DateTimeOffset] $dateTime, [FluentDate.RoundTo] $rt)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::Round($this,$args[0]) }

		 default { throw "No overload for 'Round' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>FirstDayOfWeek</Name>
        <Script> switch ($args.Count) {
				 # FirstDayOfWeek([System.DateTimeOffset] $dateTime)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::FirstDayOfWeek($this) }

		 default { throw "No overload for 'FirstDayOfWeek' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>StartOfWeek</Name>
        <Script> switch ($args.Count) {
				 # StartOfWeek([System.DateTimeOffset] $dateTime)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::StartOfWeek($this) }

		 default { throw "No overload for 'StartOfWeek' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>FirstDayOfYear</Name>
        <Script> switch ($args.Count) {
				 # FirstDayOfYear([System.DateTimeOffset] $current)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::FirstDayOfYear($this) }

		 default { throw "No overload for 'FirstDayOfYear' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>LastDayOfWeek</Name>
        <Script> switch ($args.Count) {
				 # LastDayOfWeek([System.DateTimeOffset] $current)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::LastDayOfWeek($this) }

		 default { throw "No overload for 'LastDayOfWeek' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>LastDayOfYear</Name>
        <Script> switch ($args.Count) {
				 # LastDayOfYear([System.DateTimeOffset] $current)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::LastDayOfYear($this) }

		 default { throw "No overload for 'LastDayOfYear' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>PreviousMonth</Name>
        <Script> switch ($args.Count) {
				 # PreviousMonth([System.DateTimeOffset] $current)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::PreviousMonth($this) }

		 default { throw "No overload for 'PreviousMonth' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>NextMonth</Name>
        <Script> switch ($args.Count) {
				 # NextMonth([System.DateTimeOffset] $current)
		 0 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::NextMonth($this) }

		 default { throw "No overload for 'NextMonth' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SameDay</Name>
        <Script> switch ($args.Count) {
				 # SameDay([System.DateTimeOffset] $current, [System.DateTimeOffset] $date)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SameDay($this,$args[0]) }

		 default { throw "No overload for 'SameDay' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SameMonth</Name>
        <Script> switch ($args.Count) {
				 # SameMonth([System.DateTimeOffset] $current, [System.DateTimeOffset] $date)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SameMonth($this,$args[0]) }

		 default { throw "No overload for 'SameMonth' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SameYear</Name>
        <Script> switch ($args.Count) {
				 # SameYear([System.DateTimeOffset] $current, [System.DateTimeOffset] $date)
		 1 { [FluentDateTimeOffset.DateTimeOffsetExtensions]::SameYear($this,$args[0]) }

		 default { throw "No overload for 'SameYear' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>FluentDate.FluentTimeSpan</Name>
    <Members>
      <ScriptMethod>
        <Name>Ago</Name>
        <Script> switch ($args.Count) {
				 # Ago([FluentDate.FluentTimeSpan] $from)
				 # Ago([FluentDate.FluentTimeSpan] $from)
		 0 { [FluentDateTime.TimeSpanExtensions]::Ago($this) }

				 # Ago([FluentDate.FluentTimeSpan] $from, [datetime] $originalValue)
				 # Ago([FluentDate.FluentTimeSpan] $from, [System.DateTimeOffset] $originalValue)
		 1 { [FluentDateTime.TimeSpanExtensions]::Ago($this,$args[0]) }

		 default { throw "No overload for 'Ago' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Before</Name>
        <Script> switch ($args.Count) {
				 # Before([FluentDate.FluentTimeSpan] $from, [datetime] $originalValue)
				 # Before([FluentDate.FluentTimeSpan] $from, [System.DateTimeOffset] $originalValue)
		 1 { [FluentDateTime.TimeSpanExtensions]::Before($this,$args[0]) }

		 default { throw "No overload for 'Before' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>FromNow</Name>
        <Script> switch ($args.Count) {
				 # FromNow([FluentDate.FluentTimeSpan] $from)
				 # FromNow([FluentDate.FluentTimeSpan] $from)
		 0 { [FluentDateTime.TimeSpanExtensions]::FromNow($this) }

		 default { throw "No overload for 'FromNow' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>From</Name>
        <Script> switch ($args.Count) {
				 # From([FluentDate.FluentTimeSpan] $from, [datetime] $originalValue)
				 # From([FluentDate.FluentTimeSpan] $from, [System.DateTimeOffset] $originalValue)
		 1 { [FluentDateTime.TimeSpanExtensions]::From($this,$args[0]) }

		 default { throw "No overload for 'From' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Since</Name>
        <Script> switch ($args.Count) {
				 # Since([FluentDate.FluentTimeSpan] $from, [datetime] $originalValue)
				 # Since([FluentDate.FluentTimeSpan] $from, [System.DateTimeOffset] $originalValue)
		 1 { [FluentDateTime.TimeSpanExtensions]::Since($this,$args[0]) }

		 default { throw "No overload for 'Since' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>ToDisplayString</Name>
        <Script> switch ($args.Count) {
				 # ToDisplayString([FluentDate.FluentTimeSpan] $timeSpan)
				 # ToDisplayString([FluentDate.FluentTimeSpan] $timeSpan)
		 0 { [FluentDateTime.TimeSpanExtensions]::ToDisplayString($this) }

		 default { throw "No overload for 'ToDisplayString' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>System.Int64</Name>
    <Members>
      <ScriptMethod>
        <Name>Ticks</Name>
        <Script> switch ($args.Count) {
				 # Ticks([long] $ticks)
		 0 { [FluentDate.NumberExtensions]::Ticks($this) }

		 default { throw "No overload for 'Ticks' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>System.DateTime</Name>
    <Members>
      <ScriptMethod>
        <Name>AddFluentTimeSpan</Name>
        <Script> switch ($args.Count) {
				 # AddFluentTimeSpan([datetime] $dateTime, [FluentDate.FluentTimeSpan] $timeSpan)
		 1 { [FluentDateTime.DateTimeExtensions]::AddFluentTimeSpan($this,$args[0]) }

		 default { throw "No overload for 'AddFluentTimeSpan' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SubtractFluentTimeSpan</Name>
        <Script> switch ($args.Count) {
				 # SubtractFluentTimeSpan([datetime] $dateTime, [FluentDate.FluentTimeSpan] $timeSpan)
		 1 { [FluentDateTime.DateTimeExtensions]::SubtractFluentTimeSpan($this,$args[0]) }

		 default { throw "No overload for 'SubtractFluentTimeSpan' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>EndOfDay</Name>
        <Script> switch ($args.Count) {
				 # EndOfDay([datetime] $date)
		 0 { [FluentDateTime.DateTimeExtensions]::EndOfDay($this) }

				 # EndOfDay([datetime] $date, [int] $timeZoneOffset)
		 1 { [FluentDateTime.DateTimeExtensions]::EndOfDay($this,$args[0]) }

		 default { throw "No overload for 'EndOfDay' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>BeginningOfDay</Name>
        <Script> switch ($args.Count) {
				 # BeginningOfDay([datetime] $date)
		 0 { [FluentDateTime.DateTimeExtensions]::BeginningOfDay($this) }

				 # BeginningOfDay([datetime] $date, [int] $timezoneOffset)
		 1 { [FluentDateTime.DateTimeExtensions]::BeginningOfDay($this,$args[0]) }

		 default { throw "No overload for 'BeginningOfDay' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>NextYear</Name>
        <Script> switch ($args.Count) {
				 # NextYear([datetime] $start)
		 0 { [FluentDateTime.DateTimeExtensions]::NextYear($this) }

		 default { throw "No overload for 'NextYear' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>PreviousYear</Name>
        <Script> switch ($args.Count) {
				 # PreviousYear([datetime] $start)
		 0 { [FluentDateTime.DateTimeExtensions]::PreviousYear($this) }

		 default { throw "No overload for 'PreviousYear' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>NextDay</Name>
        <Script> switch ($args.Count) {
				 # NextDay([datetime] $start)
		 0 { [FluentDateTime.DateTimeExtensions]::NextDay($this) }

		 default { throw "No overload for 'NextDay' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>PreviousDay</Name>
        <Script> switch ($args.Count) {
				 # PreviousDay([datetime] $start)
		 0 { [FluentDateTime.DateTimeExtensions]::PreviousDay($this) }

		 default { throw "No overload for 'PreviousDay' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Next</Name>
        <Script> switch ($args.Count) {
				 # Next([datetime] $start, [System.DayOfWeek] $day)
		 1 { [FluentDateTime.DateTimeExtensions]::Next($this,$args[0]) }

		 default { throw "No overload for 'Next' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Previous</Name>
        <Script> switch ($args.Count) {
				 # Previous([datetime] $start, [System.DayOfWeek] $day)
		 1 { [FluentDateTime.DateTimeExtensions]::Previous($this,$args[0]) }

		 default { throw "No overload for 'Previous' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>WeekAfter</Name>
        <Script> switch ($args.Count) {
				 # WeekAfter([datetime] $start)
		 0 { [FluentDateTime.DateTimeExtensions]::WeekAfter($this) }

		 default { throw "No overload for 'WeekAfter' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>WeekEarlier</Name>
        <Script> switch ($args.Count) {
				 # WeekEarlier([datetime] $start)
		 0 { [FluentDateTime.DateTimeExtensions]::WeekEarlier($this) }

		 default { throw "No overload for 'WeekEarlier' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>IncreaseTime</Name>
        <Script> switch ($args.Count) {
				 # IncreaseTime([datetime] $startDate, [timespan] $toAdd)
		 1 { [FluentDateTime.DateTimeExtensions]::IncreaseTime($this,$args[0]) }

		 default { throw "No overload for 'IncreaseTime' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>DecreaseTime</Name>
        <Script> switch ($args.Count) {
				 # DecreaseTime([datetime] $startDate, [timespan] $toSubtract)
		 1 { [FluentDateTime.DateTimeExtensions]::DecreaseTime($this,$args[0]) }

		 default { throw "No overload for 'DecreaseTime' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetTime</Name>
        <Script> switch ($args.Count) {
				 # SetTime([datetime] $originalDate, [int] $hour)
		 1 { [FluentDateTime.DateTimeExtensions]::SetTime($this,$args[0]) }

				 # SetTime([datetime] $originalDate, [int] $hour, [int] $minute)
		 2 { [FluentDateTime.DateTimeExtensions]::SetTime($this,$args[0],$args[1]) }

				 # SetTime([datetime] $originalDate, [int] $hour, [int] $minute, [int] $second)
		 3 { [FluentDateTime.DateTimeExtensions]::SetTime($this,$args[0],$args[1],$args[2]) }

				 # SetTime([datetime] $originalDate, [int] $hour, [int] $minute, [int] $second, [int] $millisecond)
		 4 { [FluentDateTime.DateTimeExtensions]::SetTime($this,$args[0],$args[1],$args[2],$args[3]) }

		 default { throw "No overload for 'SetTime' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetHour</Name>
        <Script> switch ($args.Count) {
				 # SetHour([datetime] $originalDate, [int] $hour)
		 1 { [FluentDateTime.DateTimeExtensions]::SetHour($this,$args[0]) }

		 default { throw "No overload for 'SetHour' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetMinute</Name>
        <Script> switch ($args.Count) {
				 # SetMinute([datetime] $originalDate, [int] $minute)
		 1 { [FluentDateTime.DateTimeExtensions]::SetMinute($this,$args[0]) }

		 default { throw "No overload for 'SetMinute' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetSecond</Name>
        <Script> switch ($args.Count) {
				 # SetSecond([datetime] $originalDate, [int] $second)
		 1 { [FluentDateTime.DateTimeExtensions]::SetSecond($this,$args[0]) }

		 default { throw "No overload for 'SetSecond' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetMillisecond</Name>
        <Script> switch ($args.Count) {
				 # SetMillisecond([datetime] $originalDate, [int] $millisecond)
		 1 { [FluentDateTime.DateTimeExtensions]::SetMillisecond($this,$args[0]) }

		 default { throw "No overload for 'SetMillisecond' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Midnight</Name>
        <Script> switch ($args.Count) {
				 # Midnight([datetime] $value)
		 0 { [FluentDateTime.DateTimeExtensions]::Midnight($this) }

		 default { throw "No overload for 'Midnight' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Noon</Name>
        <Script> switch ($args.Count) {
				 # Noon([datetime] $value)
		 0 { [FluentDateTime.DateTimeExtensions]::Noon($this) }

		 default { throw "No overload for 'Noon' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetDate</Name>
        <Script> switch ($args.Count) {
				 # SetDate([datetime] $value, [int] $year)
		 1 { [FluentDateTime.DateTimeExtensions]::SetDate($this,$args[0]) }

				 # SetDate([datetime] $value, [int] $year, [int] $month)
		 2 { [FluentDateTime.DateTimeExtensions]::SetDate($this,$args[0],$args[1]) }

				 # SetDate([datetime] $value, [int] $year, [int] $month, [int] $day)
		 3 { [FluentDateTime.DateTimeExtensions]::SetDate($this,$args[0],$args[1],$args[2]) }

		 default { throw "No overload for 'SetDate' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetYear</Name>
        <Script> switch ($args.Count) {
				 # SetYear([datetime] $value, [int] $year)
		 1 { [FluentDateTime.DateTimeExtensions]::SetYear($this,$args[0]) }

		 default { throw "No overload for 'SetYear' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetMonth</Name>
        <Script> switch ($args.Count) {
				 # SetMonth([datetime] $value, [int] $month)
		 1 { [FluentDateTime.DateTimeExtensions]::SetMonth($this,$args[0]) }

		 default { throw "No overload for 'SetMonth' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SetDay</Name>
        <Script> switch ($args.Count) {
				 # SetDay([datetime] $value, [int] $day)
		 1 { [FluentDateTime.DateTimeExtensions]::SetDay($this,$args[0]) }

		 default { throw "No overload for 'SetDay' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>IsBefore</Name>
        <Script> switch ($args.Count) {
				 # IsBefore([datetime] $current, [datetime] $toCompareWith)
		 1 { [FluentDateTime.DateTimeExtensions]::IsBefore($this,$args[0]) }

		 default { throw "No overload for 'IsBefore' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>IsAfter</Name>
        <Script> switch ($args.Count) {
				 # IsAfter([datetime] $current, [datetime] $toCompareWith)
		 1 { [FluentDateTime.DateTimeExtensions]::IsAfter($this,$args[0]) }

		 default { throw "No overload for 'IsAfter' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>At</Name>
        <Script> switch ($args.Count) {
				 # At([datetime] $current, [int] $hour, [int] $minute)
		 2 { [FluentDateTime.DateTimeExtensions]::At($this,$args[0],$args[1]) }

				 # At([datetime] $current, [int] $hour, [int] $minute, [int] $second)
		 3 { [FluentDateTime.DateTimeExtensions]::At($this,$args[0],$args[1],$args[2]) }

				 # At([datetime] $current, [int] $hour, [int] $minute, [int] $second, [int] $milliseconds)
		 4 { [FluentDateTime.DateTimeExtensions]::At($this,$args[0],$args[1],$args[2],$args[3]) }

		 default { throw "No overload for 'At' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>FirstDayOfQuarter</Name>
        <Script> switch ($args.Count) {
				 # FirstDayOfQuarter([datetime] $current)
		 0 { [FluentDateTime.DateTimeExtensions]::FirstDayOfQuarter($this) }

		 default { throw "No overload for 'FirstDayOfQuarter' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>FirstDayOfMonth</Name>
        <Script> switch ($args.Count) {
				 # FirstDayOfMonth([datetime] $current)
		 0 { [FluentDateTime.DateTimeExtensions]::FirstDayOfMonth($this) }

		 default { throw "No overload for 'FirstDayOfMonth' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>LastDayOfQuarter</Name>
        <Script> switch ($args.Count) {
				 # LastDayOfQuarter([datetime] $current)
		 0 { [FluentDateTime.DateTimeExtensions]::LastDayOfQuarter($this) }

		 default { throw "No overload for 'LastDayOfQuarter' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>LastDayOfMonth</Name>
        <Script> switch ($args.Count) {
				 # LastDayOfMonth([datetime] $current)
		 0 { [FluentDateTime.DateTimeExtensions]::LastDayOfMonth($this) }

		 default { throw "No overload for 'LastDayOfMonth' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>AddBusinessDays</Name>
        <Script> switch ($args.Count) {
				 # AddBusinessDays([datetime] $current, [int] $days)
		 1 { [FluentDateTime.DateTimeExtensions]::AddBusinessDays($this,$args[0]) }

		 default { throw "No overload for 'AddBusinessDays' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SubtractBusinessDays</Name>
        <Script> switch ($args.Count) {
				 # SubtractBusinessDays([datetime] $current, [int] $days)
		 1 { [FluentDateTime.DateTimeExtensions]::SubtractBusinessDays($this,$args[0]) }

		 default { throw "No overload for 'SubtractBusinessDays' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>IsInFuture</Name>
        <Script> switch ($args.Count) {
				 # IsInFuture([datetime] $dateTime)
		 0 { [FluentDateTime.DateTimeExtensions]::IsInFuture($this) }

		 default { throw "No overload for 'IsInFuture' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>IsInPast</Name>
        <Script> switch ($args.Count) {
				 # IsInPast([datetime] $dateTime)
		 0 { [FluentDateTime.DateTimeExtensions]::IsInPast($this) }

		 default { throw "No overload for 'IsInPast' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Round</Name>
        <Script> switch ($args.Count) {
				 # Round([datetime] $dateTime, [FluentDate.RoundTo] $rt)
		 1 { [FluentDateTime.DateTimeExtensions]::Round($this,$args[0]) }

		 default { throw "No overload for 'Round' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>FirstDayOfWeek</Name>
        <Script> switch ($args.Count) {
				 # FirstDayOfWeek([datetime] $dateTime)
		 0 { [FluentDateTime.DateTimeExtensions]::FirstDayOfWeek($this) }

		 default { throw "No overload for 'FirstDayOfWeek' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>StartOfWeek</Name>
        <Script> switch ($args.Count) {
				 # StartOfWeek([datetime] $dateTime)
		 0 { [FluentDateTime.DateTimeExtensions]::StartOfWeek($this) }

		 default { throw "No overload for 'StartOfWeek' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>FirstDayOfYear</Name>
        <Script> switch ($args.Count) {
				 # FirstDayOfYear([datetime] $current)
		 0 { [FluentDateTime.DateTimeExtensions]::FirstDayOfYear($this) }

		 default { throw "No overload for 'FirstDayOfYear' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>LastDayOfWeek</Name>
        <Script> switch ($args.Count) {
				 # LastDayOfWeek([datetime] $current)
		 0 { [FluentDateTime.DateTimeExtensions]::LastDayOfWeek($this) }

		 default { throw "No overload for 'LastDayOfWeek' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>LastDayOfYear</Name>
        <Script> switch ($args.Count) {
				 # LastDayOfYear([datetime] $current)
		 0 { [FluentDateTime.DateTimeExtensions]::LastDayOfYear($this) }

		 default { throw "No overload for 'LastDayOfYear' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>PreviousMonth</Name>
        <Script> switch ($args.Count) {
				 # PreviousMonth([datetime] $current)
		 0 { [FluentDateTime.DateTimeExtensions]::PreviousMonth($this) }

		 default { throw "No overload for 'PreviousMonth' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>NextMonth</Name>
        <Script> switch ($args.Count) {
				 # NextMonth([datetime] $current)
		 0 { [FluentDateTime.DateTimeExtensions]::NextMonth($this) }

		 default { throw "No overload for 'NextMonth' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SameDay</Name>
        <Script> switch ($args.Count) {
				 # SameDay([datetime] $current, [datetime] $date)
		 1 { [FluentDateTime.DateTimeExtensions]::SameDay($this,$args[0]) }

		 default { throw "No overload for 'SameDay' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SameMonth</Name>
        <Script> switch ($args.Count) {
				 # SameMonth([datetime] $current, [datetime] $date)
		 1 { [FluentDateTime.DateTimeExtensions]::SameMonth($this,$args[0]) }

		 default { throw "No overload for 'SameMonth' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SameYear</Name>
        <Script> switch ($args.Count) {
				 # SameYear([datetime] $current, [datetime] $date)
		 1 { [FluentDateTime.DateTimeExtensions]::SameYear($this,$args[0]) }

		 default { throw "No overload for 'SameYear' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>System.TimeSpan</Name>
    <Members>
      <ScriptMethod>
        <Name>AddFluentTimeSpan</Name>
        <Script> switch ($args.Count) {
				 # AddFluentTimeSpan([timespan] $timeSpan, [FluentDate.FluentTimeSpan] $fluentTimeSpan)
		 1 { [FluentDate.TimeSpanExtensions]::AddFluentTimeSpan($this,$args[0]) }

		 default { throw "No overload for 'AddFluentTimeSpan' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>SubtractFluentTimeSpan</Name>
        <Script> switch ($args.Count) {
				 # SubtractFluentTimeSpan([timespan] $timeSpan, [FluentDate.FluentTimeSpan] $fluentTimeSpan)
		 1 { [FluentDate.TimeSpanExtensions]::SubtractFluentTimeSpan($this,$args[0]) }

		 default { throw "No overload for 'SubtractFluentTimeSpan' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Ago</Name>
        <Script> switch ($args.Count) {
				 # Ago([timespan] $from)
				 # Ago([timespan] $from)
		 0 { [FluentDateTime.TimeSpanExtensions]::Ago($this) }

				 # Ago([timespan] $from, [datetime] $originalValue)
				 # Ago([timespan] $from, [System.DateTimeOffset] $originalValue)
		 1 { [FluentDateTime.TimeSpanExtensions]::Ago($this,$args[0]) }

		 default { throw "No overload for 'Ago' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Before</Name>
        <Script> switch ($args.Count) {
				 # Before([timespan] $from, [datetime] $originalValue)
				 # Before([timespan] $from, [System.DateTimeOffset] $originalValue)
		 1 { [FluentDateTime.TimeSpanExtensions]::Before($this,$args[0]) }

		 default { throw "No overload for 'Before' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>FromNow</Name>
        <Script> switch ($args.Count) {
				 # FromNow([timespan] $from)
				 # FromNow([timespan] $from)
		 0 { [FluentDateTime.TimeSpanExtensions]::FromNow($this) }

		 default { throw "No overload for 'FromNow' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>From</Name>
        <Script> switch ($args.Count) {
				 # From([timespan] $from, [datetime] $originalValue)
				 # From([timespan] $from, [System.DateTimeOffset] $originalValue)
		 1 { [FluentDateTime.TimeSpanExtensions]::From($this,$args[0]) }

		 default { throw "No overload for 'From' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Since</Name>
        <Script> switch ($args.Count) {
				 # Since([timespan] $from, [datetime] $originalValue)
				 # Since([timespan] $from, [System.DateTimeOffset] $originalValue)
		 1 { [FluentDateTime.TimeSpanExtensions]::Since($this,$args[0]) }

		 default { throw "No overload for 'Since' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>ToDisplayString</Name>
        <Script> switch ($args.Count) {
				 # ToDisplayString([timespan] $timeSpan)
				 # ToDisplayString([timespan] $timeSpan)
		 0 { [FluentDateTime.TimeSpanExtensions]::ToDisplayString($this) }

		 default { throw "No overload for 'ToDisplayString' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Round</Name>
        <Script> switch ($args.Count) {
				 # Round([timespan] $timeSpan, [FluentDate.RoundTo] $rt)
				 # Round([timespan] $timeSpan, [FluentDate.RoundTo] $rt)
		 1 { [FluentDateTime.TimeSpanExtensions]::Round($this,$args[0]) }

		 default { throw "No overload for 'Round' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>System.Double</Name>
    <Members>
      <ScriptMethod>
        <Name>Weeks</Name>
        <Script> switch ($args.Count) {
				 # Weeks([double] $weeks)
		 0 { [FluentDate.NumberExtensions]::Weeks($this) }

		 default { throw "No overload for 'Weeks' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Days</Name>
        <Script> switch ($args.Count) {
				 # Days([double] $days)
		 0 { [FluentDate.NumberExtensions]::Days($this) }

		 default { throw "No overload for 'Days' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Hours</Name>
        <Script> switch ($args.Count) {
				 # Hours([double] $hours)
		 0 { [FluentDate.NumberExtensions]::Hours($this) }

		 default { throw "No overload for 'Hours' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Minutes</Name>
        <Script> switch ($args.Count) {
				 # Minutes([double] $minutes)
		 0 { [FluentDate.NumberExtensions]::Minutes($this) }

		 default { throw "No overload for 'Minutes' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Seconds</Name>
        <Script> switch ($args.Count) {
				 # Seconds([double] $seconds)
		 0 { [FluentDate.NumberExtensions]::Seconds($this) }

		 default { throw "No overload for 'Seconds' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>Milliseconds</Name>
        <Script> switch ($args.Count) {
				 # Milliseconds([double] $milliseconds)
		 0 { [FluentDate.NumberExtensions]::Milliseconds($this) }

		 default { throw "No overload for 'Milliseconds' takes the specified number of parameters." }
   }
</Script>
      </ScriptMethod>
    </Members>
  </Type>
</Types>
